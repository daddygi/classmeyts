generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

// Schema for revision
model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  firstName     String?
  lastName      String?
  email         String?         @unique
  emailVerified DateTime?
  username      String?         @unique
  studentNumber String?         @unique
  college       String?
  department    String?
  yearLevel     String?
  passwordHash  String
  role          UserRole @default(USER)
  accounts      Account[]
  posts         Posts[]         @relation("UserPosts")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id              String  @id @default(auto()) @map("_id") @db.ObjectId
  email           String
  token           String @unique
  expires         DateTime

  @@unique([email,token])
}

model Colleges {
  id              String  @id @default(auto()) @map("_id") @db.ObjectId
  collegeName     String
}

model PasswordResetToken {
  id              String  @id @default(auto()) @map("_id") @db.ObjectId
  email           String
  token           String  @unique
  expires         DateTime

  @@unique([email, token])
}

model Posts {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @db.ObjectId
  department  String
  upvote      Int
  downvote    Int
  description String
  title       String
  file        String
  tags        String
  archive     Boolean

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation("UserPosts", fields: [userId], references: [id])
}
